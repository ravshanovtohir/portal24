// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  summary      String?   @db.VarChar(500)
  content      String    @db.Text
  image_url    String?   @db.Text
  category     String    @db.VarChar(50)
  tags         String[]
  source_links String[]
  author_id    Int
  views        Int       @default(0)
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  author       User      @relation(fields: [author_id], references: [id])

  @@map("post")
}

model News {
  id          Int       @id @default(autoincrement())
  title_uz    String?   @db.VarChar(255)
  title_ru    String?   @db.VarChar(255)
  title_en    String    @db.VarChar(255)
  summary_uz  String?   @db.VarChar(500)
  summary_ru  String?   @db.VarChar(500)
  summary_en  String?   @db.VarChar(500)
  content_uz  String?   @db.Text
  content_ru  String?   @db.Text
  content_en  String    @db.Text
  image_url   String?   @db.Text
  status      Status    @default(ACTIVE)
  slug_uz     String?
  slug_ru     String?
  slug_en     String?
  tags        String[]
  is_hot      Boolean?  @default(false)
  author_id   Int
  categoty_id Int
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  author      User      @relation(fields: [author_id], references: [id])
  category    Category  @relation(fields: [categoty_id], references: [id])
  likes       Like[]
  comments    Comment[]

  @@index([title_uz])
  @@index([title_ru])
  @@index([title_en])
  @@index([slug_uz, slug_ru, slug_en])
  @@map("news")
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  news_id    Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  news       News     @relation(fields: [news_id], references: [id])

  @@unique([user_id, news_id])
  @@map("likes")
}

model Comment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  news_id    Int
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  news       News     @relation(fields: [news_id], references: [id])

  @@map("comments")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique @db.VarChar(255)
  password String    @db.VarChar(255)
  role     String    @default("user") @db.VarChar(50)
  posts    Post[]
  news     News[]
  Like     Like[]
  Comment  Comment[]

  @@map("user")
}

model Category {
  id         Int       @id @default(autoincrement())
  name_uz    String?
  name_ru    String?
  name_en    String
  status     Status    @default(ACTIVE)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  news       News[]

  @@map("category")
}

model Lid {
  id           Int     @id @default(autoincrement())
  sender_name  String
  email        String?
  phone_number String
  message      String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Weather {
  id         Int   @id @default(autoincrement())
  weather_uz Json?
  weather_ru Json?
  weather_en Json?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

enum Status {
  ACTIVE
  INACTIVE
}
